# Generated by Django 4.0.6 on 2022-07-15 15:19

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import neurovault.apps.statmaps.models
import neurovault.apps.statmaps.storage
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseCollectionItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200)),
                ('description', models.TextField(blank=True)),
                ('add_date', models.DateTimeField(auto_now_add=True, verbose_name='date published')),
                ('modify_date', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('is_valid', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='CognitiveAtlasTask',
            fields=[
                ('name', models.CharField(db_index=True, max_length=200)),
                ('cog_atlas_id', models.CharField(max_length=200, primary_key=True, serialize=False)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=200, unique=True, verbose_name='Lexical label of the community')),
                ('short_desc', models.CharField(max_length=200, verbose_name='Short description of the community')),
            ],
        ),
        migrations.CreateModel(
            name='KeyValueTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='name')),
                ('slug', models.SlugField(allow_unicode=True, max_length=100, unique=True, verbose_name='slug')),
                ('value', models.CharField(blank=True, max_length=200)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('basecollectionitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='statmaps.basecollectionitem')),
                ('file', models.FileField(max_length=500, storage=neurovault.apps.statmaps.storage.DoubleExtensionStorage(), upload_to=neurovault.apps.statmaps.models.upload_img_to, verbose_name='File with the unthresholded volume map (.img, .nii, .nii.gz)')),
                ('surface_left_file', models.FileField(blank=True, null=True, storage=neurovault.apps.statmaps.storage.DoubleExtensionStorage(), upload_to=neurovault.apps.statmaps.models.upload_img_to, verbose_name='File with the unthresholded LEFT hemisphere fsaverage surface map (.mgh, .curv, .gii)')),
                ('surface_right_file', models.FileField(blank=True, null=True, storage=neurovault.apps.statmaps.storage.DoubleExtensionStorage(), upload_to=neurovault.apps.statmaps.models.upload_img_to, verbose_name='File with the unthresholded RIGHT hemisphere fsaverage surface map (.mgh, .curv, .gii)')),
                ('data_origin', models.CharField(blank=True, choices=[('volume', 'volume'), ('surface', 'surface')], default='volume', help_text='Was this map originally derived from volume or surface?', max_length=200, null=True, verbose_name='Data origin')),
                ('target_template_image', models.CharField(choices=[('GenericMNI', 'Human (Generic/Unknown MNI)'), ('Dorr2008', 'Mouse (Dorr 2008 space)'), ('NMT', 'Rhesus - macacca mulatta (NMT)'), ('MNI152NLin2009cAsym', 'Human (MNI152 NLin 2009c Asym)')], default='GenericMNI', help_text='Name of target template image', max_length=200, verbose_name='Target template image')),
                ('subject_species', models.CharField(blank=True, default='homo sapiens', max_length=200, null=True)),
                ('figure', models.CharField(blank=True, help_text='Which figure in the corresponding paper was this map displayed in?', max_length=200, null=True, verbose_name='Corresponding figure')),
                ('handedness', models.CharField(blank=True, choices=[('L', 'Left'), ('R', 'Right')], max_length=200, null=True, verbose_name='Handedness')),
                ('age', models.FloatField(blank=True, null=True, verbose_name='Age (years)')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=200, null=True, verbose_name='Gender')),
                ('race', models.CharField(blank=True, choices=[('W', 'White'), ('B', 'Black or African American'), ('I', 'American Indian or Alaska Native'), ('A', 'Asian'), ('H', 'Native Hawaiian or Other Pacific Islander')], max_length=200, null=True, verbose_name='Race (US Census definition)')),
                ('ethnicity', models.CharField(blank=True, choices=[('H', 'Hispanic or Latino'), ('NH', 'Not Hispanic or Latino')], max_length=200, null=True, verbose_name='Ethnicity (US Census definition)')),
                ('BMI', models.FloatField(blank=True, null=True, verbose_name='Body Mass Index (kg/m2)')),
                ('fat_percentage', models.FloatField(blank=True, null=True, verbose_name='% body fat')),
                ('waist_hip_ratio', models.FloatField(blank=True, null=True, verbose_name='waist-hip-ratio')),
                ('mean_PDS_score', models.FloatField(blank=True, null=True, verbose_name='Mean Puberty Development Scale score')),
                ('tanner_stage', models.CharField(blank=True, choices=[('I', 'I'), ('II', 'II'), ('III', 'III'), ('IV', 'IV'), ('V', 'V')], max_length=200, null=True, verbose_name='Tanner stage')),
                ('days_since_menstruation', models.FloatField(blank=True, null=True, verbose_name='Number of days since menstruation')),
                ('hours_since_last_meal', models.FloatField(blank=True, null=True, verbose_name='Time since last meal (hours)')),
                ('bis_bas_score', models.FloatField(blank=True, null=True, verbose_name='Behavioral inhibition, behavioral activation (BIS/BAS) score')),
                ('spsrq_score', models.FloatField(blank=True, null=True, verbose_name='Sensitivity to Punishment and Sensitivity to Reward Questionnaire (SPSRQ) score')),
                ('bis11_score', models.FloatField(blank=True, null=True, verbose_name='Barratt Impulsiveness Scale (BIS-11) score')),
                ('thumbnail', models.FileField(blank=True, help_text='The orthogonal view thumbnail path of the nifti image', null=True, storage=neurovault.apps.statmaps.storage.DoubleExtensionStorage(), upload_to=neurovault.apps.statmaps.models.upload_img_to, verbose_name='Image orthogonal view thumbnail 2D bitmap')),
                ('reduced_representation', models.FileField(blank=True, help_text='Binary file with the vector of in brain values resampled to lower resolution', null=True, storage=neurovault.apps.statmaps.storage.OverwriteStorage(), upload_to=neurovault.apps.statmaps.models.upload_img_to, verbose_name='Reduced representation of the image')),
                ('data', models.JSONField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('statmaps.basecollectionitem',),
        ),
        migrations.CreateModel(
            name='NIDMResults',
            fields=[
                ('basecollectionitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='statmaps.basecollectionitem')),
                ('ttl_file', models.FileField(blank=True, null=True, storage=neurovault.apps.statmaps.storage.NIDMStorage(), upload_to=neurovault.apps.statmaps.models.upload_nidm_to, verbose_name='Turtle serialization of NIDM Results (.ttl)')),
                ('zip_file', models.FileField(storage=neurovault.apps.statmaps.storage.NIDMStorage(), upload_to=neurovault.apps.statmaps.models.upload_nidm_to, verbose_name='NIDM Results zip file')),
            ],
            options={
                'verbose_name_plural': 'NIDMResults',
            },
            bases=('statmaps.basecollectionitem',),
        ),
        migrations.CreateModel(
            name='ValueTaggedItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField(db_index=True, verbose_name='object ID')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_tagged_items', to='contenttypes.contenttype', verbose_name='content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='statmaps.keyvaluetag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Similarity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('similarity_metric', models.CharField(db_index=True, help_text='the name of the similarity metric to describe a relationship between two or more images.', max_length=200, verbose_name='similarity metric name')),
                ('transformation', models.CharField(blank=True, db_index=True, help_text='the name of the transformation of the data relevant to the metric', max_length=200, verbose_name='transformation of images name')),
                ('metric_ontology_iri', models.URLField(blank=True, db_index=True, help_text='If defined, a url of an ontology IRI to describe the similarity metric', verbose_name='similarity metric ontology IRI')),
                ('transformation_ontology_iri', models.URLField(blank=True, db_index=True, help_text='If defined, a url of an ontology IRI to describe the transformation metric', verbose_name='image transformation ontology IRI')),
            ],
            options={
                'verbose_name': 'similarity metric',
                'verbose_name_plural': 'similarity metrics',
                'unique_together': {('similarity_metric', 'transformation')},
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Name of collection')),
                ('DOI', models.CharField(blank=True, default=None, help_text='Required if you want your maps to be archived in Stanford Digital Repository', max_length=200, null=True, unique=True, verbose_name='DOI of the corresponding paper')),
                ('authors', models.CharField(blank=True, max_length=5000, null=True)),
                ('paper_url', models.CharField(blank=True, max_length=200, null=True)),
                ('journal_name', models.CharField(blank=True, default=None, max_length=200, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('full_dataset_url', models.URLField(blank=True, help_text='Link to an external dataset the maps in this collection have been generated from (for example: "https://openfmri.org/dataset/ds000001" or "http://dx.doi.org/10.15387/fcp_indi.corr.mpg1")', null=True, verbose_name='Full dataset URL')),
                ('private', models.BooleanField(choices=[(False, 'Public (The collection will be accessible by anyone and all the data in it will be distributed under CC0 license)'), (True, 'Private (The collection will be not listed in the NeuroVault index. It will be possible to shared it with others at a private URL.)')], default=False, verbose_name='Accessibility')),
                ('private_token', models.CharField(blank=True, db_index=True, default=None, max_length=8, null=True, unique=True)),
                ('add_date', models.DateTimeField(auto_now_add=True, verbose_name='date published')),
                ('modify_date', models.DateTimeField(auto_now=True, verbose_name='date modified')),
                ('doi_add_date', models.DateTimeField(blank=True, db_index=True, editable=False, null=True, verbose_name='date the DOI was added')),
                ('type_of_design', models.CharField(blank=True, choices=[('blocked', 'blocked'), ('eventrelated', 'event_related'), ('hybridblockevent', 'hybrid block/event'), ('other', 'other')], help_text='Blocked, event-related, hybrid, or other', max_length=200, null=True, verbose_name='Type of design')),
                ('number_of_imaging_runs', models.IntegerField(blank=True, help_text='Number of imaging runs acquired', null=True, verbose_name='No. of imaging runs')),
                ('number_of_experimental_units', models.IntegerField(blank=True, help_text='Number of blocks, trials or experimental units per imaging run', null=True, verbose_name='No. of experimental units')),
                ('length_of_runs', models.FloatField(blank=True, help_text='Length of each imaging run in seconds', null=True, verbose_name='Length of runs')),
                ('length_of_blocks', models.FloatField(blank=True, help_text='For blocked designs, length of blocks in seconds', null=True, verbose_name='Length of blocks')),
                ('length_of_trials', models.CharField(blank=True, help_text="Length of individual trials in seconds. If length varies across trials, enter 'variable'. ", max_length=200, null=True, verbose_name='Length of trials')),
                ('optimization', models.BooleanField(blank=True, help_text='Was the design optimized for efficiency', null=True, verbose_name='Optimization?')),
                ('optimization_method', models.CharField(blank=True, help_text='What method was used for optimization?', max_length=200, null=True, verbose_name='Optimization method')),
                ('subject_age_mean', models.FloatField(blank=True, help_text='Mean age of subjects', null=True, verbose_name='Subject age mean')),
                ('subject_age_min', models.FloatField(blank=True, help_text='Minimum age of subjects', null=True, verbose_name='Subject age min')),
                ('subject_age_max', models.FloatField(blank=True, help_text='Maximum age of subjects', null=True, verbose_name='Subject age max')),
                ('handedness', models.CharField(blank=True, choices=[('right', 'right'), ('left', 'left'), ('both', 'both')], help_text='Handedness of subjects', max_length=200, null=True, verbose_name='Handedness')),
                ('proportion_male_subjects', models.FloatField(blank=True, help_text='The proportion (not percentage) of subjects who were male', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='Prop. male subjects')),
                ('inclusion_exclusion_criteria', models.CharField(blank=True, help_text='Additional inclusion/exclusion criteria, if any (including specific sampling strategies that limit inclusion to a specific group, such as laboratory members)', max_length=200, null=True, verbose_name='Inclusion / exclusion criteria')),
                ('number_of_rejected_subjects', models.IntegerField(blank=True, help_text='Number of subjects scanned but rejected from analysis', null=True, verbose_name='No. of rejected subjects')),
                ('group_comparison', models.BooleanField(blank=True, help_text='Was this study a comparison between subject groups?', null=True, verbose_name='Group comparison?')),
                ('group_description', models.CharField(blank=True, help_text='A description of the groups being compared', max_length=200, null=True, verbose_name='Group description')),
                ('scanner_make', models.CharField(blank=True, help_text='Manufacturer of MRI scanner', max_length=200, null=True, verbose_name='Scanner make')),
                ('scanner_model', models.CharField(blank=True, help_text='Model of MRI scanner', max_length=200, null=True, verbose_name='Scanner model')),
                ('field_strength', models.FloatField(blank=True, help_text='Field strength of MRI scanner (in Tesla)', null=True, verbose_name='Field strength')),
                ('pulse_sequence', models.CharField(blank=True, help_text='Description of pulse sequence used for fMRI', max_length=200, null=True, verbose_name='Pulse sequence')),
                ('parallel_imaging', models.CharField(blank=True, help_text='Description of parallel imaging method and parameters', max_length=200, null=True, verbose_name='Parallel imaging')),
                ('field_of_view', models.FloatField(blank=True, help_text='Imaging field of view in millimeters', null=True, verbose_name='Field of view')),
                ('matrix_size', models.IntegerField(blank=True, help_text='Matrix size for MRI acquisition', null=True, verbose_name='Matrix size')),
                ('slice_thickness', models.FloatField(blank=True, help_text='Distance between slices (includes skip or distance factor) in millimeters', null=True, verbose_name='Slice thickness')),
                ('skip_distance', models.FloatField(blank=True, help_text='The size of the skipped area between slices in millimeters', null=True, verbose_name='Skip distance')),
                ('acquisition_orientation', models.CharField(blank=True, help_text='The orientation of slices', max_length=200, null=True, verbose_name='Acquisition orientation')),
                ('order_of_acquisition', models.CharField(blank=True, choices=[('ascending', 'ascending'), ('descending', 'descending'), ('interleaved', 'interleaved')], help_text='Order of acquisition of slices (ascending, descending, or interleaved)', max_length=200, null=True, verbose_name='Order of acquisition')),
                ('repetition_time', models.FloatField(blank=True, help_text='Repetition time (TR) in milliseconds', null=True, verbose_name='Repetition time')),
                ('echo_time', models.FloatField(blank=True, help_text='Echo time (TE) in milliseconds', null=True, verbose_name='Echo time')),
                ('flip_angle', models.FloatField(blank=True, help_text='Flip angle in degrees', null=True, verbose_name='Flip angle')),
                ('software_package', models.CharField(blank=True, help_text='If a single software package was used for all analyses, specify that here', max_length=200, null=True, verbose_name='Software package')),
                ('software_version', models.CharField(blank=True, help_text='Version of software package used', max_length=200, null=True, verbose_name='Software version')),
                ('order_of_preprocessing_operations', models.CharField(blank=True, help_text='Specify order of preprocessing operations', max_length=200, null=True, verbose_name='Order of preprocessing')),
                ('quality_control', models.CharField(blank=True, help_text='Describe quality control measures', max_length=200, null=True, verbose_name='Quality control')),
                ('used_b0_unwarping', models.BooleanField(blank=True, help_text='Was B0 distortion correction used?', null=True, verbose_name='Used B0 unwarping?')),
                ('b0_unwarping_software', models.CharField(blank=True, help_text='Specify software used for distortion correction if different from the main package', max_length=200, null=True, verbose_name='B0 unwarping software')),
                ('used_slice_timing_correction', models.BooleanField(blank=True, help_text='Was slice timing correction used?', null=True, verbose_name='Slice timing correction?')),
                ('slice_timing_correction_software', models.CharField(blank=True, help_text='Specify software used for slice timing correction if different from the main package', max_length=200, null=True, verbose_name='Slice timing correction software')),
                ('used_motion_correction', models.BooleanField(blank=True, help_text='Was motion correction used?', null=True, verbose_name='Motion correction?')),
                ('motion_correction_software', models.CharField(blank=True, help_text='Specify software used for motion correction if different from the main package', max_length=200, null=True, verbose_name='Motion correction software')),
                ('motion_correction_reference', models.CharField(blank=True, help_text='Reference scan used for motion correction', max_length=200, null=True, verbose_name='Motion correction reference')),
                ('motion_correction_metric', models.CharField(blank=True, help_text='Similarity metric used for motion correction', max_length=200, null=True, verbose_name='Motion correction metric')),
                ('motion_correction_interpolation', models.CharField(blank=True, help_text='Interpolation method used for motion correction', max_length=200, null=True, verbose_name='Motion correction interpolation')),
                ('used_motion_susceptibiity_correction', models.BooleanField(blank=True, help_text='Was motion-susceptibility correction used?', null=True, verbose_name='Motion susceptibility correction?')),
                ('used_intersubject_registration', models.BooleanField(blank=True, help_text='Were subjects registered to a common stereotactic space?', null=True, verbose_name='Intersubject registration?')),
                ('intersubject_registration_software', models.CharField(blank=True, help_text='Specify software used for intersubject registration if different from main package', max_length=200, null=True, verbose_name='Registration software')),
                ('intersubject_transformation_type', models.CharField(blank=True, choices=[('linear', 'linear'), ('nonlinear', 'nonlinear')], help_text='Was linear or nonlinear registration used?', max_length=200, null=True, verbose_name='Intersubject transformation type')),
                ('nonlinear_transform_type', models.CharField(blank=True, help_text='If nonlinear registration was used, describe transform method', max_length=200, null=True, verbose_name='Nonlinear transform type')),
                ('transform_similarity_metric', models.CharField(blank=True, help_text='Similarity metric used for intersubject registration', max_length=200, null=True, verbose_name='Transform similarity metric')),
                ('interpolation_method', models.CharField(blank=True, help_text='Interpolation method used for intersubject registration', max_length=200, null=True, verbose_name='Interpolation method')),
                ('object_image_type', models.CharField(blank=True, help_text='What type of image was used to determine the transformation to the atlas? (e.g. T1, T2, EPI)', max_length=200, null=True, verbose_name='Object image type')),
                ('functional_coregistered_to_structural', models.BooleanField(blank=True, help_text="Were the functional images coregistered to the subject's structural image?", null=True, verbose_name='Coregistered to structural?')),
                ('functional_coregistration_method', models.CharField(blank=True, help_text='Method used to coregister functional to structural images', max_length=200, null=True, verbose_name='Coregistration method')),
                ('coordinate_space', models.CharField(blank=True, choices=[('mni', 'MNI'), ('talairach', 'Talairach'), ('mni2tal', 'MNI2Tal'), ('other', 'other')], help_text='Name of coordinate space for registration target', max_length=200, null=True, verbose_name='Coordinate space')),
                ('target_template_image', models.CharField(blank=True, help_text='Name of target template image', max_length=200, null=True, verbose_name='Target template image')),
                ('target_resolution', models.FloatField(blank=True, help_text='Voxel size of target template in millimeters', null=True, verbose_name='Target resolution')),
                ('used_smoothing', models.BooleanField(blank=True, help_text='Was spatial smoothing applied?', null=True, verbose_name='Used smoothing?')),
                ('smoothing_type', models.CharField(blank=True, help_text='Describe the type of smoothing applied', max_length=200, null=True, verbose_name='Type of smoothing')),
                ('smoothing_fwhm', models.FloatField(blank=True, help_text='The full-width at half-maximum of the smoothing kernel in millimeters', null=True, verbose_name='Smoothing FWHM')),
                ('resampled_voxel_size', models.FloatField(blank=True, help_text='Voxel size in mm of the resampled, atlas-space images', null=True, verbose_name='Resampled voxel size')),
                ('intrasubject_model_type', models.CharField(blank=True, help_text='Type of model used (e.g., regression)', max_length=200, null=True, verbose_name='Model type')),
                ('intrasubject_estimation_type', models.CharField(blank=True, help_text='Estimation method used for model (e.g., OLS, generalized least squares)', max_length=200, null=True, verbose_name='Estimation type')),
                ('intrasubject_modeling_software', models.CharField(blank=True, help_text='Software used for intrasubject modeling if different from overall package', max_length=200, null=True, verbose_name='Modeling software')),
                ('hemodynamic_response_function', models.CharField(blank=True, help_text='Nature of HRF model', max_length=200, null=True, verbose_name='Hemodynamic response function')),
                ('used_temporal_derivatives', models.BooleanField(blank=True, help_text='Were temporal derivatives included?', null=True, verbose_name='Temporal derivatives?')),
                ('used_dispersion_derivatives', models.BooleanField(blank=True, help_text='Were dispersion derivatives included?', null=True, verbose_name='Dispersion derivatives?')),
                ('used_motion_regressors', models.BooleanField(blank=True, help_text='Were motion regressors included?', null=True, verbose_name='Motion regressors?')),
                ('used_reaction_time_regressor', models.BooleanField(blank=True, help_text='Was a reaction time regressor included?', null=True, verbose_name='Reaction time regressor?')),
                ('used_orthogonalization', models.BooleanField(blank=True, help_text='Were any regressors specifically orthogonalized with respect to others?', null=True, verbose_name='Orthogonalization?')),
                ('orthogonalization_description', models.CharField(blank=True, help_text='If orthogonalization was used, describe here', max_length=200, null=True, verbose_name='Orthogonalization description')),
                ('used_high_pass_filter', models.BooleanField(blank=True, help_text='Was high pass filtering applied?', null=True, verbose_name='High-pass filter?')),
                ('high_pass_filter_method', models.CharField(blank=True, help_text='Describe method used for high pass filtering', max_length=200, null=True, verbose_name='High-pass filtering method')),
                ('autocorrelation_model', models.CharField(blank=True, help_text="What autocorrelation model was used (or 'none' of none was used)", max_length=200, null=True, verbose_name='Autocorrelation method')),
                ('group_model_type', models.CharField(blank=True, help_text='Type of group model used (e.g., regression)', max_length=200, null=True, verbose_name='Group model type')),
                ('group_estimation_type', models.CharField(blank=True, help_text='Estimation method used for group model (e.g., OLS, generalized least squares)', max_length=200, null=True, verbose_name='Group estimation type')),
                ('group_modeling_software', models.CharField(blank=True, help_text='Software used for group modeling if different from overall package', max_length=200, null=True, verbose_name='Group modeling software')),
                ('group_inference_type', models.CharField(blank=True, choices=[('randommixedeffects', 'random/mixed effects'), ('fixedeffects', 'fixed effects')], help_text='Type of inference for group model', max_length=200, null=True, verbose_name='Group inference type')),
                ('group_model_multilevel', models.CharField(blank=True, help_text='If more than 2-levels, describe the levels and assumptions of the model (e.g. are variances assumed equal between groups)', max_length=200, null=True, verbose_name='Multilevel modeling')),
                ('group_repeated_measures', models.BooleanField(blank=True, help_text='Was this a repeated measures design at the group level?', null=True, verbose_name='Repeated measures')),
                ('group_repeated_measures_method', models.CharField(blank=True, help_text='If multiple measurements per subject, list method to account for within subject correlation, exact assumptions made about correlation/variance', max_length=200, null=True, verbose_name='Repeated measures method')),
                ('nutbrain_hunger_state', models.CharField(blank=True, choices=[('I', 'Fed (<1h after meal)'), ('II', '2-3 h fasted'), ('III', '4-6 h fasted'), ('IV', '7-9h fasted'), ('V', 'fasted overnight (> 10h)'), ('VI', '36h fast')], max_length=200, null=True, verbose_name='Hunger state')),
                ('nutbrain_food_viewing_conditions', models.CharField(blank=True, help_text='Image categories', max_length=200, null=True, verbose_name='Food viewing conditions')),
                ('nutbrain_food_choice_type', models.CharField(blank=True, help_text='Choice conditions/image types', max_length=200, null=True, verbose_name='Food choice type')),
                ('nutbrain_taste_conditions', models.CharField(blank=True, max_length=200, null=True, verbose_name='Taste conditions')),
                ('nutbrain_odor_conditions', models.CharField(blank=True, max_length=200, null=True, verbose_name='Odor conditions')),
                ('communities', models.ManyToManyField(blank=True, default=None, help_text='Is this collection part of any special Community?', related_name='collections', related_query_name='collection', to='statmaps.community', verbose_name='Communities')),
                ('contributors', models.ManyToManyField(blank=True, help_text='Select other NeuroVault users to add as contributes to the collection.  Contributors can add, edit and delete images in the collection.', related_name='collection_contributors', related_query_name='contributor', to=settings.AUTH_USER_MODEL, verbose_name='Contributors')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CognitiveAtlasContrast',
            fields=[
                ('name', models.CharField(max_length=200)),
                ('cog_atlas_id', models.CharField(max_length=200, primary_key=True, serialize=False)),
                ('task', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='statmaps.cognitiveatlastask')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='basecollectionitem',
            name='collection',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='statmaps.collection'),
        ),
        migrations.AddField(
            model_name='basecollectionitem',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_%(app_label)s.%(class)s_set+', to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='basecollectionitem',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='statmaps.ValueTaggedItem', to='statmaps.KeyValueTag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='Atlas',
            fields=[
                ('image_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='statmaps.image')),
                ('label_description_file', models.FileField(storage=neurovault.apps.statmaps.storage.DoubleExtensionStorage(), upload_to=neurovault.apps.statmaps.models.upload_img_to, verbose_name='FSL compatible label description file (.xml)')),
            ],
            options={
                'verbose_name_plural': 'Atlases',
            },
            bases=('statmaps.image',),
        ),
        migrations.CreateModel(
            name='StatisticMap',
            fields=[
                ('image_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='statmaps.image')),
                ('map_type', models.CharField(choices=[('T', 'T map'), ('Z', 'Z map'), ('F', 'F map'), ('X2', 'Chi squared map'), ('P', 'P map (given null hypothesis)'), ('IP', '1-P map ("inverted" probability)'), ('M', 'multivariate-beta map'), ('U', 'univariate-beta map'), ('R', 'ROI/mask'), ('Pa', 'parcellation'), ('A', 'anatomical'), ('V', 'variance'), ('Other', 'other')], help_text='Type of statistic that is the basis of the inference', max_length=200, verbose_name='Map type')),
                ('is_thresholded', models.BooleanField(blank=True, null=True)),
                ('perc_bad_voxels', models.FloatField(blank=True, null=True)),
                ('not_mni', models.BooleanField(blank=True, null=True)),
                ('brain_coverage', models.FloatField(blank=True, null=True)),
                ('perc_voxels_outside', models.FloatField(blank=True, null=True)),
                ('analysis_level', models.CharField(choices=[('S', 'single-subject'), ('G', 'group'), ('M', 'meta-analysis'), ('Other', 'other')], help_text='What level of summary data was used as the input to this analysis?', max_length=200, null=True, verbose_name='Analysis level')),
                ('number_of_subjects', models.IntegerField(help_text='Number of subjects used to generate this map', null=True, verbose_name='No. of subjects')),
                ('ignore_file_warning', models.BooleanField(default=False, help_text='Ignore the warning when the map is sparse by nature, an ROI mask, or was acquired with limited field of view.', verbose_name='Ignore the warning')),
                ('modality', models.CharField(choices=[('fMRI-BOLD', 'fMRI-BOLD'), ('fMRI-CBF', 'fMRI-CBF'), ('fMRI-CBV', 'fMRI-CBV'), ('Diffusion MRI', 'Diffusion MRI'), ('Structural MRI', 'Structural MRI'), ('PET FDG', 'PET FDG'), ('PET [15O]-water', 'PET [15O]-water'), ('PET other', 'PET other'), ('MEG', 'MEG'), ('EEG', 'EEG'), ('Other', 'Other')], help_text='Brain imaging procedure that was used to acquire the data.', max_length=200, verbose_name='Modality & Acquisition Type')),
                ('statistic_parameters', models.FloatField(blank=True, help_text='Parameters of the null distribution of the test statistic, typically degrees of freedom (should be clear from the test statistic what these are).', null=True, verbose_name='Statistic parameters')),
                ('smoothness_fwhm', models.FloatField(blank=True, help_text='Noise smoothness for statistical inference; this is the estimated smoothness used with Random Field Theory or a simulation-based inference method.', null=True, verbose_name='Smoothness FWHM')),
                ('contrast_definition', models.CharField(blank=True, help_text="Exactly what terms are subtracted from what? Define these in terms of task or stimulus conditions (e.g., 'one-back task with objects versus zero-back task with objects') instead of underlying psychological concepts (e.g., 'working memory').", max_length=200, null=True, verbose_name='Contrast definition')),
                ('contrast_definition_cogatlas', models.CharField(blank=True, help_text="Link to <a href='http://www.cognitiveatlas.org/'>Cognitive Atlas</a> definition of this contrast", max_length=200, null=True, verbose_name='Cognitive Atlas definition')),
                ('cognitive_paradigm_description_url', models.URLField(blank=True, help_text='Link to a paper, poster, abstract or other form text describing in detail the task performed by the subject(s) in the scanner.', null=True, verbose_name='Cognitive Paradigm Description URL')),
                ('cognitive_contrast_cogatlas', models.ForeignKey(blank=True, help_text="Link to <a href='http://www.cognitiveatlas.org/'>Cognitive Atlas</a> definition of this contrast", null=True, on_delete=django.db.models.deletion.PROTECT, to='statmaps.cognitiveatlascontrast', verbose_name='Cognitive Atlas Contrast')),
                ('cognitive_paradigm_cogatlas', models.ForeignKey(help_text="Task (or lack of it) performed by the subjects in the scanner described using <a href='http://www.cognitiveatlas.org/' target='_blank'>Cognitive Atlas</a> terms", null=True, on_delete=django.db.models.deletion.PROTECT, to='statmaps.cognitiveatlastask', verbose_name='Cognitive Atlas Paradigm')),
            ],
            options={
                'abstract': False,
            },
            bases=('statmaps.image',),
        ),
        migrations.CreateModel(
            name='NIDMResultStatisticMap',
            fields=[
                ('image_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='statmaps.image')),
                ('map_type', models.CharField(choices=[('T', 'T map'), ('Z', 'Z map'), ('F', 'F map'), ('X2', 'Chi squared map'), ('P', 'P map (given null hypothesis)'), ('IP', '1-P map ("inverted" probability)'), ('M', 'multivariate-beta map'), ('U', 'univariate-beta map'), ('R', 'ROI/mask'), ('Pa', 'parcellation'), ('A', 'anatomical'), ('V', 'variance'), ('Other', 'other')], help_text='Type of statistic that is the basis of the inference', max_length=200, verbose_name='Map type')),
                ('is_thresholded', models.BooleanField(blank=True, null=True)),
                ('perc_bad_voxels', models.FloatField(blank=True, null=True)),
                ('not_mni', models.BooleanField(blank=True, null=True)),
                ('brain_coverage', models.FloatField(blank=True, null=True)),
                ('perc_voxels_outside', models.FloatField(blank=True, null=True)),
                ('analysis_level', models.CharField(choices=[('S', 'single-subject'), ('G', 'group'), ('M', 'meta-analysis'), ('Other', 'other')], help_text='What level of summary data was used as the input to this analysis?', max_length=200, null=True, verbose_name='Analysis level')),
                ('number_of_subjects', models.IntegerField(help_text='Number of subjects used to generate this map', null=True, verbose_name='No. of subjects')),
                ('nidm_results', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='statmaps.nidmresults')),
            ],
            options={
                'abstract': False,
            },
            bases=('statmaps.image',),
        ),
        migrations.CreateModel(
            name='Metaanalysis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('status', models.CharField(blank=True, choices=[('active', 'active'), ('inactive', 'inactive'), ('completed', 'completed')], default='active', max_length=200, null=True)),
                ('output_maps', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='statmaps.collection')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('maps', models.ManyToManyField(blank=True, to='statmaps.statisticmap')),
            ],
        ),
        migrations.CreateModel(
            name='Comparison',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('similarity_score', models.FloatField(help_text='the comparison score between two or more statistical maps', verbose_name='the comparison score between two or more statistical maps')),
                ('similarity_metric', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='statmaps.similarity')),
                ('image1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='image1', to='statmaps.image')),
                ('image2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='image2', to='statmaps.image')),
            ],
            options={
                'verbose_name': 'pairwise image comparison',
                'verbose_name_plural': 'pairwise image comparisons',
                'unique_together': {('image1', 'image2')},
                'index_together': {('image2', 'similarity_metric'), ('image1', 'image2', 'similarity_metric'), ('image1', 'similarity_metric')},
            },
        ),
    ]
