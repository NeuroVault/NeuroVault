# This configuration was automatically generated from a CircleCI 1.0 config.
# It should include any build commands you had along with commands that CircleCI
# inferred from your project structure. We strongly recommend you read all the
# comments in this file to understand the structure of CircleCI 2.0, as the idiom
# for configuration has changed substantially in 2.0 to allow arbitrary jobs rather
# than the prescribed lifecycle of 1.0. In general, we recommend using this generated
# configuration as a reference rather than using it in production, though in most
# cases it should duplicate the execution of your original 1.0 config.
version: 2
jobs:
  build:
    machine:
      image: circleci/classic:201711-01
    working_directory: ~/NeuroVault/NeuroVault
    parallelism: 2
    shell: /bin/bash --login
    # CircleCI 2.0 does not support environment variables that refer to each other the same way as 1.0 did.
    # If any of these refer to each other, rewrite them so that they don't or see https://circleci.com/docs/2.0/env-vars/#interpolating-environment-variables-to-set-other-environment-variables .
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results

    steps:
    # Machine Setup
    #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
    # The following `checkout` command checks out your code to your working directory. In 1.0 we did this implicitly. In 2.0 you can choose where in the course of a job your code should be checked out.
    - checkout
    # Prepare for artifact and test results  collection equivalent to how it was done on 1.0.
    # In many cases you can simplify this from what is generated here.
    # 'See docs on artifact collection here https://circleci.com/docs/2.0/artifacts/'
    - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
    # Dependencies
    #   This would typically go in either a build or a build-and-test job when using workflows
    # Restore the dependency cache
    - restore_cache:
        keys:
        # This branch if available
        - v1-dep-{{ .Branch }}-
        # Default branch if not
        - v1-dep-master-
        # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch configured correctly
        - v1-dep-

    - run: if [[ -e ~/docker/image.tar ]]; then docker load -i ~/docker/image.tar; fi
    - run: ./scripts/git-set-file-times
    - run: docker build -t neurovault/neurovault .
    - run: docker pull nginx && docker pull postgres && docker pull redis && docker pull cogniteev/echo
    - run: mkdir -p ~/docker; docker save "neurovault/neurovault" > ~/docker/image.tar
    # Save dependency cache
    - save_cache:
        key: v1-dep-{{ .Branch }}-{{ epoch }}
        paths:
        # This is a broad list of cache paths to include many possible development environments
        # You can probably delete some of these entries
        - vendor/bundle
        - ~/virtualenvs
        - ~/.m2
        - ~/.ivy2
        - ~/.bundle
        - ~/.go_workspace
        - ~/.gradle
        - ~/.cache/bower
        # These cache paths were specified in the 1.0 config
        - ~/docker
    # Test
    #   This would typically be a build job when using workflows, possibly combined with build
    # This is based on your 1.0 configuration file or project settings
    - run:
        name: docker-compose --verbose up -d && sleep 50
        command: if [ "$CIRCLE_NODE_INDEX" == "0" ]; then docker-compose --verbose up -d && sleep 50; fi
    - run:
        name: curl --retry 10 --retry-delay 15 -vkf http://localhost
        command: if [ "$CIRCLE_NODE_INDEX" == "0" ]; then curl --retry 10 --retry-delay 15 -vkf http://localhost; fi
    - run:
        name: set -o pipefail && docker-compose run uwsgi python manage.py test -v 2 2>&1 | tee log.txt
        command: if [ "$CIRCLE_NODE_INDEX" == "0" ]; then set -o pipefail && docker-compose run -T uwsgi python manage.py test -v 2 2>&1 | tee log.txt; fi
    - run:
        name: if grep -q "^OK" log.txt; then true; else cat log.txt; false; fi
        command: if [ "$CIRCLE_NODE_INDEX" == "0" ]; then if grep -q "^OK" log.txt; then true; else cat log.txt; false; fi; fi
    # Deployment
    # Your existing circle.yml file contains deployment steps.
    # The config translation tool does not support translating deployment steps
    # since deployment in CircleCI 2.0 are better handled through workflows.
    # See the documentation for more information https://circleci.com/docs/2.0/workflows/
    # Teardown
    #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
    # Save test results
    - store_test_results:
        path: /tmp/circleci-test-results
    # Save artifacts
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: /tmp/circleci-test-results
